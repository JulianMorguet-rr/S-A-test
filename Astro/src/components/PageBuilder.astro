---

type HeroImage = {
    heroImage: {
        _type: 'image';
        asset: {
            _ref: string;
        }
    }
}

type PageContent = 
    |   { _type: 'hero'; 
            heading?: string;
            subtitle?: string 
            title?: string;
            tagline?: string;
            image?: any;
            text?: string;
            blockContent?: Array<any>;
            excerpt?: string;
            switchImageToRightSide?: boolean;
            images?: Array<any>;   
            pageContent: any;
        }
    |   { _type: 'gallery'; 
            heading: string; 
            subheading: string;
            images: any[] 
        }
    |   { _type: 'form'; 
            heading: string
            subtitle?: string 
            placeholderName?: string | undefined
            placeholderEmail?: string | undefined
            placeholderTextarea?: string | undefined
            buttonText?: string | undefined 
        }
    |   { _type: 'textWithIllustration'; 
            heading: string; 
            text: string; 
            image: any; 
            switchImageToRightSide: boolean 
        }
    |   { 
            _type: 'justAnImage'; 
            heading: string; 
            text: string; 
            image: any; 
            referenceToPage: HeroImage;
        }




export interface Props {
	pageContent: PageContent
};

 
  

const data = Astro.props as Props // PageContent; // Props

// URL builder
import { urlFor } from '../lib/sanityApi.js';

import TextWidthImage from '../components/TextWidthImage.vue';
import ContactForm from '../components/contactForm/ContactForm.vue';
import JustAnImage from '../components/TestingViewTransitions.astro';

// Calc ImageGallerie width
let imageGalleryWidth = 1092 / 3 - 15;
let roundetImageGalleryWidth = Math.floor(imageGalleryWidth);


// Convert blockContent to HTML
// import { blocksToHtml }  from '@sanity/block-content-to-html'
// console.log('blocksToHtml: ', blocksToHtml)

// const h = blocksToHtml.h

// const serializers = {
//   types: {
//     code: props => (
//       h('pre', {className: props.node.language},
//         h('code', props.node.code)
//       )
//     )
//   }
// }

// let blockContentHTML = blocksToHtml({
//     blocks: data.pageContent.blockContent,
//     serializers: serializers
// })

// console.log('blockContentHTML: ', blockContentHTML)

// Intersection Observer API
// better place in component? 
// (function (document) {
//   const markers = [...document.querySelectorAll('mark')];
  
//   const observer = new IntersectionObserver(entries => {
//     entries.forEach((entry) => {
//       if (entry.intersectionRatio > 0) {
//         entry.target.style.animationPlayState = 'running';
//         observer.unobserve(entry.target);
//       }
//     });
//   }, {
//     threshold: 0.8
//   });
  
//   markers.forEach(mark => {
//     observer.observe(mark);
//   });
// })(document);



---

<section>

    <!-- {JSON.stringify(data)} -->

    {data.pageContent._type === 'hero' && 
        <div class={data.pageContent._type} style={{backgroundImage: `url(${urlFor(data.pageContent.image).width(2400).format('webp').url()})`}}>
            <h1><span class="text-gradient">{data.pageContent.heading}</span></h1>
            <h3>{data.pageContent.tagline}</h3>
            {/* <p>{JSON.stringify(data.pageContent)}</p> */}
        </div>
    }
    
    {data.pageContent._type === 'textWithIllustration' &&  
        <TextWidthImage 
            data={data.pageContent}
            client:load
            transition:persist
        />
    }
    
    {data.pageContent._type === 'gallery' &&  
        <div> 
            <h2>{(data.pageContent.heading)}</h2>
            <h4>{data.pageContent.subheading}</h4>
            {/* <p>{JSON.stringify(data.pageContent)}</p> */}
            {/* <pan>imageGalleryWidth: {imageGalleryWidth}</pan> 
            <span>
                {
                    data.pageContent.images.map(image => (
                        image.asset._ref
                    ))
                }
            </span>
            */}
            <div class="flexbox column">
                {
                    data.pageContent.images ?
                    data.pageContent.images.map(image => {
                        return <div class="galleryItem">
                                <img src={urlFor(image).width(roundetImageGalleryWidth).height(300).format('webp').url()} alt={image.alt}/>
                            </div>
                        
                        // console.log('image.asset: ', image.asset._ref)
                        // <p>Image:</p>
                        // <p>image.asset</p>
                    }) : null
                }
            </div>
        </div>
    }
    
    {data.pageContent._type === 'form' &&  
        <div>
            // @ts-ignore
            <ContactForm data={data.pageContent} client:load />
            <h3> {JSON.stringify(data.pageContent)}</h3>
        </div>
    }


    {data.pageContent._type === 'justAnImage' && 
        <div class="z-front">
            <JustAnImage data={data.pageContent}/>
        </div>
    }



    <!-- && form == 'newsletter' -->

    <script>
        // let contentWidth = document.querySelector('main').style.width
        // console.log(contentWidth)


        // Observer 
        const myMarkers = [...document.querySelectorAll('mark')];
        console.log('/// OBSERVER ///')
        
        const intersectionObserver = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                // if (entry.intersectionRatio > 0) {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                    intersectionObserver.unobserve(entry.target);
                }
                console.log(entry)
            });
        }, {
            threshold: 0.8
        });

        // intersectionObserver.observe(myMarkers[0]);
        myMarkers.forEach(mark => {
            intersectionObserver.observe(mark);
        });
    </script>

</section>

<style lang="scss">

    .z-front {
        z-index: 999;
    }

    main section:first-child {
		margin-top: 0 !important;
	}

    section:first-child {
        margin-top: 0 !important;
        padding-top: 0px;
    }

    section {
        display: flex;
        flex-direction: column;
        /* justify-content: center;
        align-items: center; */
        width: 100%;
        height: auto;
        padding: 2rem 0;
    }

    .hero {
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        width: 100%;
        height: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        padding: 24rem 0 6rem 0;
        margin-left: -50vw;
        left: 50%;
        width: 100vw;
        position: relative;
    }

    .hero h1 {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .hero h3 {
        font-size: 1.5rem;
    }

</style>