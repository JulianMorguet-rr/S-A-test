---
import { ContentItem } from '../types/PageContent';
  
const props = Astro.props // as PageContent // as Props // PageContent; // Props
const { pageBuilder } = props as { pageBuilder: ContentItem };

// URL builder
import { urlFor } from '../lib/sanityApi.js';

import { Image } from 'astro:assets';

import TextWidthImage from '../components/TextWidthImage.vue';
import ContactForm from '../components/contactForm/ContactForm.vue';
// @ts-ignore
import JustAnImage from './JustAnImage.astro';
import TextSection from './TextSection.astro';
import TextAndImage from './TextAndImage.astro';
import TextWithStickyImage from './TextWithStickyImage.astro';
// @ts-ignore
import Quote from './quotes/Quote.astro';
import SingleQuote from './SingleQuote.astro';
import BlockContent from './BlockContent.astro';
import Accordion from './Accordion.astro';
import StatementSlider from './StatementSlider.astro';
import TextWithTwoColumns from './TextWithTwoColumns.astro';
import QuoteCollection from './QuoteCollection.astro';
import ContactSection from './ContactSection.astro';
import StatementGrid from './StatementGrid.astro';
import HTMLElement from './HTMLElement.astro';
// import { Image } from 'astro:assets';


const nodemailerBaseURL: string = import.meta.env.NODEMAILER_BASE_URL;
// console.log('nodemailerBaseURL: ', nodemailerBaseURL)

const nodemailerContactFormPath: string = import.meta.env.NODEMAILER_CONTACT_FORM_PATH;
// console.log('nodemailerContactFormPath: ', nodemailerContactFormPath)

// Calc ImageGallerie width
let imageGalleryWidth = 1092 / 3 - 15;
let roundetImageGalleryWidth = Math.floor(imageGalleryWidth);

---

<section>

    <!-- <h2>Page Builder Section</h2> -->

    
    {pageBuilder._type === 'hero' && 
        <div class={pageBuilder._type} style={{backgroundImage: `url(${urlFor(pageBuilder.image).width(2400).format('webp').url()})`}}>
            <h1><span class="text-gradient">{pageBuilder.heading}</span></h1>
            <h3>{pageBuilder.tagline}</h3>
        </div>
    }
    

    {pageBuilder._type === 'textSection' &&  
        <TextSection 
            data={pageBuilder}
        />
    }
    
    {pageBuilder._type === 'textWithTwoColumns' &&  
        <TextWithTwoColumns 
            data={pageBuilder}
        />
    }

    {pageBuilder._type === 'textWithIllustration' &&  
        <TextAndImage 
            data={pageBuilder}
        />
    }

    {
    pageBuilder._type === 'textWithStickyImage' &&
        <TextWithStickyImage data={pageBuilder} />
    }
    
    {pageBuilder._type === 'gallery' &&  
        <div> 
            <h2>{(pageBuilder.heading)}</h2>
            <h4>{pageBuilder.subheading}</h4>

            <div class="flexbox column">
                {
                    pageBuilder.images ?
                    pageBuilder.images.map(image => {
                        return <div class="galleryItem">
                                <Image 
                                    width={300}
                                    height={300}
                                    src={urlFor(image).width(roundetImageGalleryWidth).height(300).format('webp').url()} 
                                    alt={image.alt || 'alt text missing'}
                                />
                            </div>
                    }) : null
                }
            </div>
        </div>
    }
    
    {pageBuilder._type === 'form' &&  
        <div>
            <ContactForm data={pageBuilder} nodemailerBaseURL={nodemailerBaseURL} nodemailerContactFormPath={nodemailerContactFormPath} client:load />
            {/*  <h3> {JSON.stringify(pageBuilder)}</h3> */}
        </div>
    }


    {pageBuilder._type === 'justAnImage' && 
        <JustAnImage data={pageBuilder}/>
    }


    {pageBuilder._type === 'quoteCollection' &&
        <QuoteCollection data={pageBuilder} />
    }


    {pageBuilder._type === 'singleQuote' &&
        <SingleQuote data={pageBuilder} />
    }


    {pageBuilder._type === 'statementCollection' && 
        <StatementSlider data={pageBuilder} />
    }
    
    
    {pageBuilder._type === 'statementCollectionGrid' && 
        <StatementGrid data={pageBuilder} />
    }


    {pageBuilder._type === 'accordionSection' && 
        <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
                <section class="bg-white dark:bg-gray-900">
                    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6 ">
                        { pageBuilder.tagline &&
                            <p class="section-tagline mb-4 ">
                                {pageBuilder.tagline}
                            </p>
                        }
                        { pageBuilder.heading &&
                        <h2 class="section-heading mb-4 text-4xl tracking-tight text-gray-900">
                            {pageBuilder.heading}
                        </h2>
                        }
                        { pageBuilder.blockContent &&
                            <BlockContent data={pageBuilder.blockContent} />
                        }
                        <div class="mx-auto max-w-screen-md">
                            <div id="accordion-flush" data-accordion="collapse" data-active-classes="bg-white dark:bg-gray-900 text-gray-900 dark:text-white" data-inactive-classes="text-gray-500 dark:text-gray-400">           
            
                                {
                                    pageBuilder.singleAccordionItem &&
                                        <div class="accordion">
                                        {
                                            pageBuilder.singleAccordionItem.map((item, index) => {
                                                return (
                                                        <Accordion item={item} index={index} pageBuilder={pageBuilder}/>
                                                    )
                                                })
                                        }
                                        </div>
                                }
                            </div>
                        </div>
                    </div>
                </section>
            

            <br>
            <br>
            <br>
            
            {JSON.stringify(pageBuilder)}
        </div>
    }


    {
        pageBuilder._type === 'contactSection' &&
            <ContactSection data={pageBuilder} />
    }
    
    
    {
        pageBuilder._type === 'htmlElement' &&
            <HTMLElement data={pageBuilder} />
    }

</section>

<style lang="scss">

/* PageBuilder Styles */ 

    .z-front {
        z-index: 999;
    }

    main section:first-child {
		margin-top: 0 !important;
	}

    section:first-child {
        margin-top: 0 !important;
        padding-top: 0px;
    }

    section {
        display: flex;
        flex-direction: column;
        /* justify-content: center;
        align-items: center; */
        width: 100%;
        height: auto;
        // padding: 2rem 0;
    }

    .hero {
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        width: 100%;
        height: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        padding: 24rem 0 6rem 0;
        margin-left: -50vw;
        left: 50%;
        width: 100vw;
        position: relative;
    }

    // .hero h1 {
    //     font-size: 3rem;
    //     margin-bottom: 1rem;
    // }

    .hero h3 {
        font-size: 1.5rem;
    }

</style>


<style is:global>
    .accordion-body > div {
        margin-top: 1rem;
        margin-bottom: 0px !important;
    }    
</style>