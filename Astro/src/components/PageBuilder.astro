---
import { ContentItem } from '../types/PageContent';
  
const props = Astro.props // as PageContent // as Props // PageContent; // Props
const { pageBuilder } = props as { pageBuilder: ContentItem };

// URL builder
import { urlFor } from '../lib/sanityApi.js';

import TextWidthImage from '../components/TextWidthImage.vue';
import ContactForm from '../components/contactForm/ContactForm.vue';
// @ts-ignore
import JustAnImage from './JustAnImage.astro';
import TextAndImage from './TextAndImage.astro';
// @ts-ignore
import Quote from './quotes/Quote.astro';
import { Image } from 'astro:assets';
// import { Image } from 'astro:assets';


const nodemailerBaseURL: string = import.meta.env.NODEMAILER_BASE_URL;
console.log('nodemailerBaseURL: ', nodemailerBaseURL)

const nodemailerContactFormPath: string = import.meta.env.NODEMAILER_CONTACT_FORM_PATH;
console.log('nodemailerContactFormPath: ', nodemailerContactFormPath)

// Calc ImageGallerie width
let imageGalleryWidth = 1092 / 3 - 15;
let roundetImageGalleryWidth = Math.floor(imageGalleryWidth);


// Convert blockContent to HTML
// import { blocksToHtml }  from '@sanity/block-content-to-html'
// console.log('blocksToHtml: ', blocksToHtml)

// const h = blocksToHtml.h

// const serializers = {
//   types: {
//     code: props => (
//       h('pre', {className: props.node.language},
//         h('code', props.node.code)
//       )
//     )
//   }
// }

// let blockContentHTML = blocksToHtml({
//     blocks: data.pageContent.blockContent,
//     serializers: serializers
// })

// console.log('blockContentHTML: ', blockContentHTML)

// Intersection Observer API
// better place in component? 
// (function (document) {
//   const markers = [...document.querySelectorAll('mark')];
  
//   const observer = new IntersectionObserver(entries => {
//     entries.forEach((entry) => {
//       if (entry.intersectionRatio > 0) {
//         entry.target.style.animationPlayState = 'running';
//         observer.unobserve(entry.target);
//       }
//     });
//   }, {
//     threshold: 0.8
//   });
  
//   markers.forEach(mark => {
//     observer.observe(mark);
//   });
// })(document);



---

<section>

    <!-- <h2>Page Builder Section</h2> -->

    
    {pageBuilder._type === 'hero' && 
        <div class={pageBuilder._type} style={{backgroundImage: `url(${urlFor(pageBuilder.image).width(2400).format('webp').url()})`}}>
            <h1><span class="text-gradient">{pageBuilder.heading}</span></h1>
            <h3>{pageBuilder.tagline}</h3>
        </div>
    }
    
    <!--
    {pageBuilder._type === 'textWithIllustration' &&  
        <TextWidthImage 
            data={pageBuilder}
            client:load
            transition:persist
        />
    }
    -->
    

    {pageBuilder._type === 'textWithIllustration' &&  
        <TextAndImage 
            data={pageBuilder}
        />
    }
    
    {pageBuilder._type === 'gallery' &&  
        <div> 
            <h2>{(pageBuilder.heading)}</h2>
            <h4>{pageBuilder.subheading}</h4>

            <div class="flexbox column">
                {
                    pageBuilder.images ?
                    pageBuilder.images.map(image => {
                        return <div class="galleryItem">
                                <Image 
                                    width={300}
                                    height={300}
                                    src={urlFor(image).width(roundetImageGalleryWidth).height(300).format('webp').url()} 
                                    alt={image.alt || 'alt text missing'}
                                />
                            </div>
                    }) : null
                }
            </div>
        </div>
    }
    
    {pageBuilder._type === 'form' &&  
        <div>
            <ContactForm data={pageBuilder} nodemailerBaseURL={nodemailerBaseURL} nodemailerContactFormPath={nodemailerContactFormPath} client:load />
            {/*  <h3> {JSON.stringify(pageBuilder)}</h3> */}
        </div>
    }


    {pageBuilder._type === 'justAnImage' && 
        <div class="z-front">
            <JustAnImage data={pageBuilder}/>
        </div>
    }


    {pageBuilder._type === 'quoteCollection' &&
        <section class="bg-white dark:bg-gray-900">
            <div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16 lg:px-6">
                {/* <h2>{JSON.stringify(pageBuilder)}</h2> */}
                
                <div class="mx-auto max-w-screen-md text-center mb-8 lg:mb-12">
                    <h2 class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white">
                        {pageBuilder.heading}    
                    </h2>
                    <p class="mb-5 font-light text-gray-500 sm:text-xl dark:text-gray-400">
                        {pageBuilder.paragraph}
                    </p>
                </div>

                <div class="space-y-8 lg:grid lg:grid-cols-3 sm:gap-6 xl:gap-10 lg:space-y-0">
                    {   
                        pageBuilder.quoteArray.map(ref => {
                            return (
                                <Quote reference={ref} />
                            )
                        })
                    }

                </div>
            </div>
        </section>
    }

    


    <!-- && form == 'newsletter' -->

    <script>
        // let contentWidth = document.querySelector('main').style.width
        // console.log(contentWidth)


        // Observer 
        const myMarkers = [...document.querySelectorAll('mark')];
        console.log('/// OBSERVER ///')
        
        const intersectionObserver = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                // if (entry.intersectionRatio > 0) {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                    intersectionObserver.unobserve(entry.target);
                }
                console.log(entry)
            });
        }, {
            threshold: 0.8
        });

        // intersectionObserver.observe(myMarkers[0]);
        myMarkers.forEach(mark => {
            intersectionObserver.observe(mark);
        });
    </script>

</section>

<style lang="scss">

    .z-front {
        z-index: 999;
    }

    main section:first-child {
		margin-top: 0 !important;
	}

    section:first-child {
        margin-top: 0 !important;
        padding-top: 0px;
    }

    section {
        display: flex;
        flex-direction: column;
        /* justify-content: center;
        align-items: center; */
        width: 100%;
        height: auto;
        // padding: 2rem 0;
    }

    .hero {
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        width: 100%;
        height: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        padding: 24rem 0 6rem 0;
        margin-left: -50vw;
        left: 50%;
        width: 100vw;
        position: relative;
    }

    .hero h1 {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .hero h3 {
        font-size: 1.5rem;
    }

</style>