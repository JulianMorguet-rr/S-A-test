---

import BlockContent from "./BlockContent.astro";

const { data } = Astro.props 


function generateUID() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2, 9);
}
// Beispielaufruf
const uid = generateUID();

---


<div class="single-quote py-8 fullwidthBackground">

    <!--
    <div id="svg-displacement" style="opacity: 0; position: absolute;">
        <svg viewBox="0 0 2000 568" fill="none" preserveAspectRatio="xMidYMin slice">
            <defs>
                <filter id="displacementFilter">
                    <feTurbulence id="displacementTurbulence" type="fractalNoise" baseFrequency="0.3" numOctaves="3" result="noise" />
                    <feDisplacementMap in="SourceGraphic" in2="noise" scale="50" xChannelSelector="R" yChannelSelector="G" />
                </filter>
                <mask id="singleQuoteMask">
                    <circle cx="0" cy="0" r="100" fill="white" class="displacement" />
                </mask>
                <clipPath id="myClip">
                    <circle class="circleClip" cx="50%" cy="50%" r="0" />
                </clipPath>
                <linearGradient id="myGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" stop-color="red" class="start"></stop>
                    <stop offset="100%" stop-color="yellow" class="end"></stop>
                </linearGradient>
            </defs>
            <rect width="1920" height="600" class="animated-svg-gradient" width="100%" height="100%" fill="#73b740"  mask="url(#singleQuoteMask)" />
        </svg>
    </div>
    -->

    <div class="outer-wrapper py-8 lg:px-6 mx-auto">

        <div class="inner-wrapper py-8 px-4 lg:px-6 mx-auto max-w-screen-xl sm:py-16">


            <!-- <p class="section-tagline text-gray-500 sm:text-xl mb-4">
                {data.tagline}
            </p>
            <h2 class="section-heading mb-4 text-4xl tracking-tight font-extrabold text-gray-900">
                {data.heading}
            </h2>
            
            <p>
                {data.paragraph}
            </p> 
            -->

           
            <div class="quote-content">
                { data.quoteReference?.quote &&
                    <blockquote class="xl:w-8/12 m-auto">
                        <h2 class="section-heading mb-4 text-4xl tracking-tight font-extrabold text-white text-center ">{data.quoteReference?.quote}</h2>
                    </blockquote>
                }
            
                { data.quoteReference?.author &&
                    <cite class="section-tagline py-2 text-white text-center font-bold block w-full">{data.quoteReference?.author}</cite>
                }
                
                { data.quoteReference?.source &&
                    (
                        <p class="section-block-content py-2 text-white text-center">{data.quoteReference?.source}</p>
                    )
                }

                <!-- <p>{JSON.stringify(data)}</p> -->
            </div>

            
            
           

            <!-- displacement -->
            <!-- <div class="full-size "> -->
                <!-- class: mask -->
                <div class="animated-bg-gradient" ></div>
            <!-- </div> -->

        </div>

    </div>

    <!--
    <script>

        gsap.registerPlugin(ScrollTrigger);
  
        console.log('gsap: ', gsap)
  
        let tl = gsap.timeline({
          scrollTrigger: {
            trigger: ".single-quote",
            start: "-50% center", // first "top" ist for target element, second top is for viewport | can also accept percentages 
            end: "bottom center", // first "top" ist for target element, second top is for viewport | can also accept percentages
            scrub: false, // 0.5, // Plays only one if false ore gets controles by "toggleActions"
            // toggleActions: 'play none none reverse' // 4 values for onEnter, onLeave, onEnterBack (comes into view from scrolling up), onLeaveBack () -> e.g. "play reverse puse/none reverse" 
            // pin: true, // pins the element â€“ meaning fixe it on screen
            markers: true,
          }
        })

        // tl.to('.displacement', {
        //   attr: {
        //     r: '1200'
        //   }, 
        //   duration: 2,
        // })

        tl.to('.circleClip', {
          attr: {
            r: 'calc(100vw + 100px)'
          }, 
          duration: 2,
        })

        // tl.to('#displacementTurbulence', {
        //   attr: {
        //     baseFrequency: '0.0'
        //   }, 
        //   duration: 2,
        // })
        
    </script>
    -->

</div>


<style lang="scss">

/* Quote essential styles */ 
.single-quote {
    overflow: hidden;

    .outer-wrapper {
        overflow: hidden;
        position: relative;

        .quote-content {
            position: relative;
            z-index: 9;
        }

    }
}
.fullwidthBackground {
    left: calc(50% - 50vw );
    width: 100vw !important;
    position: relative;
}


.full-size {
    z-index: -1;
    position: absolute;
    top: -100px;
    left: -100px;
    right: -100px;
    bottom: -100px;
}


.animated-bg-gradient {
    background: linear-gradient(45deg,#f77f7f,#eadb3a);
    background-size: 200% 200%;
    -webkit-animation: hero 10s infinite;
    -moz-animation: hero 10s infinite;
    -o-animation: hero 10s infinite;
    animation: hero 10s infinite;
    box-shadow: 0 0 7px 0 rgba(0,0,0,.2);

    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;

    &:before {
        content: "";
        position: absolute;
        background-image: radial-gradient(circle at center center, #f89f9f 0%, rgb(255 152 0 / 0%) 66%);
        mix-blend-mode: hard-light;
        mix-blend-mode: multiply;
        opacity: 0;
        width: 50vw;
        height: 50vw;
        top: -25vw;
        left: -25vw;
        animation: heroBefore 10s infinite;
    }

    &:after {
        content: "";
        position: absolute;
        background-image: radial-gradient(circle at center center,#feae79 0%,rgba(255,152,0,0) 70%);
        mix-blend-mode: hard-light;
        mix-blend-mode: multiply;
        opacity: 0;
        width: 50vw;
        height: 50vw;
        bottom: -25vw;
        right: -25vw;

        animation: heroAfter 10s infinite;
    }
}

/* Quote Animation styles */ 


#svg-displacement {
    height: 600px;
    max-height: 600px;
    width: 100%;
    // position: absolute;
    // opacity: 0.5;
    // z-index: 9;

    svg {
        width: 100%;
    }
}

.displacement {
    filter: url(#displacementFilter);
}

.circle-mask {
    clip-path: url(#circleMask);
}



@keyframes gradientAnimation {
    0% {
        stop-color: red;
    }
    50% {
        stop-color: blue;
    }
    100% {
        stop-color: red;
    }
}

.animated-gradiend {
    animation: gradientAnimation 5s infinite;
}

.mask {
	// mask: url(https://uploads-ssl.webflow.com/5bfc1e1e7110551550530061/5c34168938fadf22f0b9761e_logo_condensed_svg-mask.svg) no-repeat;
	// mask: url(#singleQuoteMask) no-repeat;
    clip-path: url(#myClip);

    // -webkit-mask-image: url(#singleQuoteMask);
    // mask-image: url(#singleQuoteMask);
}

</style>