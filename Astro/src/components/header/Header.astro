---
/*
Einige Dinge zu beachten:

Ich habe den <template>-Tag entfernt, da er in Astro nicht benötigt wird.
Ich habe die v-for-Schleife durch die JavaScript map-Funktion ersetzt.
Ich habe die :key, :href und :class Direktiven durch die entsprechenden JSX-Attribute ersetzt.
Ich habe den <style>-Block beibehalten, aber das scoped-Attribut entfernt, da Astro keine native Unterstützung für scoped Styles bietet. Du könntest jedoch eine CSS-Modul-Lösung verwenden, wenn du das benötigst.
Ich habe den Code für die Daten und Funktionen im Frontmatter-Bereich (zwischen den --- Zeilen) als Kommentar eingefügt. Du müsstest deine eigenen Daten und Funktionen importieren.
Hoffentlich hilft dir das weiter!

*/ 

import Hamburger from './Hamburger.astro';
import MobileNav from './MobileNav.astro';

import { Image } from 'astro:assets';
import { urlFor } from '../../lib/sanityApi.js';

interface NavItem {
    linkName: string
    title: string // "title" is not in use anymore
    isReference?: boolean
    // If is Reference is true
    slug?: string
    pageReference?: {
        slug: string
    }
    // If is Reference is false
    individualURL?: string
}
interface GlobalSiteSettings {
    title: string
    desciption: string
    // Favicon ist fraglich 
    favicon: {
        src: string
        svg: string
        altText: string
    }
    logo: {
        src: string
        svg: string
        altText: string
    }
}

interface Props {
    globalSiteSettings: GlobalSiteSettings
    mainMenu: {
        mainNav: Array<NavItem>
    }
    slug: string | undefined
}
// const props = defineProps({
//     siteSettings: Object as () => SiteSettings,
//     slug: String
// })




// let env = import.meta.env
// console.log('env from Header.astro: ', env)

const currentURL = Astro.request.url;

const { globalSiteSettings, mainMenu, slug } = Astro.props as Props

const mainNav: Array<NavItem> = []
const computedMainNav = () => {
    mainMenu.mainNav.map((navItem: NavItem) => {
        mainNav.push(navItem)
    })
}
computedMainNav()
---


<div class="color-overlay">
</div>

<header >
    <div class="outer-wrapper base-shadow">
        <div class="inner py-4 px-4 lg:px-6 mx-auto max-w-screen-xl">
            <a href="/" aria-label="Zur Startseite">
                {
                    globalSiteSettings.logo.svg ? 
                        (<div class="logo" set:html={globalSiteSettings.logo.svg}></div>)
                    : globalSiteSettings.logo.src ?
                        <Image
                            src={urlFor(globalSiteSettings.logo.src).format('webp').url()} alt="Logo der Seite"
                                alt="Logo der Seite"
                            width={140}
                            height={56}
                        /> 
                    :   <p>
                            {globalSiteSettings.title}
                        </p>
                }
            </a>
            
            <nav role="navigation" class="desktop-nav">
                <!-- {
                    <p>mainNav: { JSON.stringify(mainNav) }</p>
                } -->
                {mainNav.map((nav, index) => (
                    <div>
                        {
                            nav?.isReference ?
                            <a
                                href={nav.pageReference?.slug}
                                class={
                                    (`${nav.pageReference?.slug}` === currentURL ? 'active' : '')
                                }
                            >
                                {nav.linkName} 
                            </a>
                            : 
                            
                            <a
                                href={nav.individualURL}
                            >
                                {nav.linkName} 
                            </a>
                        }
                    </div>
                ))}
            </nav>

            <!--
                av?.isReference ?
                            <a
                                href={nav.slug}
                                class={
                                    (`${nav.slug}` === currentURL ? 'active' : '')
                                }
                            >
                                {nav.title} 
                                {JSON.stringify(nav)}
                            </a>
                            : 
                            <a
                                href={nav.individualURL}
                            >
                                {nav.linkName} 
                            </a>
             -->


            
            <nav class="mobile-nav">
                
                <MobileNav mainNav={mainNav} />

                <Hamburger />

                <!--
                <input type="checkbox" />

                <span></span>
                <span></span>
                <span></span>
                
                <ul id="menu">
                <a href="#"><li>Home</li></a>
                <a href="#"><li>About</li></a>
                <a href="#"><li>Info</li></a>
                <a href="#"><li>Contact</li></a>
                <a href="https://erikterwan.com/" target="_blank"><li>Show me more</li></a>
                </ul>
                -->
            </nav>


            
        </div>
    </div>
    <!-- 
    <script is:inline>
        const loadPage = (slug) => {
            console.log('slug: ', slug)
            window.open(`http://localhost:4321/${slug}`, '_self')
        }
    </script> 
    -->



</header>



<div class="header-space" style="height: 80px;"></div>

<style lang="scss">

    // ::view-transition-old(main-header),
    // ::view-transition-new(main-header) {
    //     animation: rotate-new;
    // }

    // @keyframes rotate-new {
    //     from { 
    //         rotate: 77deg;
    //     }
    // }


    header {
        max-height: 88px;

        .outer-wrapper {
            width: 100%;
        }


        .mobile-nav {
            display: flex;
            flex-grow: 3;
            justify-content: flex-end;
        }

        @media screen and (min-width: 1280px) {
            .mobile-nav {
                display: none !important;
            }
        }
        @media screen and (max-width: 1279px) {
            .desktop-nav {
                display: none !important;
            }
        }
    }

    .color-overlay {
        height: 0;
        width: 100vw;
        background: rgb(11 149 161);
        position: fixed;
        z-index: 99999;
        display: block;

        transition: height 0.3s ease-in-out;

        &.active {
            height: 100vh;

            transition: height 0.3s ease-in-out;
        }
    }


/**
 * Mobile menu only with CSS – not in Use 
 */
    
#menuToggle
{
    display: block;
    position: absolute;
    left: auto;
    right: 2rem;
    width: 27px;
    
    z-index: 1;
    
    -webkit-user-select: none;
    user-select: none;
}

#menuToggle a
{
  text-decoration: none;
  color: #232323;
  
  transition: color 0.3s ease;
}

#menuToggle a:hover
{
  color: tomato;
}


#menuToggle input
{
  display: block;
  width: 40px;
  height: 32px;
  position: absolute;
  top: -7px;
  left: -5px;
  
  cursor: pointer;
  
  opacity: 0; /* hide this */
  z-index: 2; /* and place it over the hamburger */
  
  -webkit-touch-callout: none;
}

/*
 * Just a quick hamburger
 */
#menuToggle span
{
  display: block;
  width: 33px;
  height: 4px;
  margin-bottom: 5px;
  position: relative;
  
  background: #cdcdcd;
  border-radius: 3px;
  
  z-index: 1;
  
  transform-origin: 4px 0px;
  
  transition: transform 0.5s cubic-bezier(0.77,0.2,0.05,1.0),
              background 0.5s cubic-bezier(0.77,0.2,0.05,1.0),
              opacity 0.55s ease;
}

#menuToggle span:first-child
{
  transform-origin: 0% 0%;
}

#menuToggle span:nth-last-child(2)
{
  transform-origin: 0% 100%;
}

/* 
 * Transform all the slices of hamburger
 * into a crossmark.
 */
#menuToggle input:checked ~ span
{
  opacity: 1;
  transform: rotate(45deg) translate(-2px, -1px);
  background: #232323;
}

/*
 * But let's hide the middle one.
 */
#menuToggle input:checked ~ span:nth-last-child(3)
{
  opacity: 0;
  transform: rotate(0deg) scale(0.2, 0.2);
}

/*
 * Ohyeah and the last one should go the other direction
 */
#menuToggle input:checked ~ span:nth-last-child(2)
{
  transform: rotate(-45deg) translate(0, -1px);
}

/*
 * Make this absolute positioned
 * at the top left of the screen
 */
#menu
{
  position: absolute;
  width: 300px;
  margin: -100px 0 0 -100vw;
  padding: 50px;
  padding-top: 125px;
  
  background: #ededed;
  list-style-type: none;
  -webkit-font-smoothing: antialiased;
  /* to stop flickering of text in safari */
  
  transform-origin: 0% 0%;
  transform: translate(-100%, 0);
  
  transition: transform 0.5s cubic-bezier(0.77,0.2,0.05,1.0);
}

// ul#menu {
//     max-height: 0;
//     overflow: hidden;
//     padding: 0 !important;
// }

#menu li
{
  padding: 10px 0;
  font-size: 22px;
}

/*
 * And let's slide it in from the left
 */
#menuToggle input:checked ~ ul
{
  transform: none;
}


</style>






