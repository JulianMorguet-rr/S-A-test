---
/**
 * IMPORTANT! 
 * Only works with Sanity Image API
 */

/* OWN Image Optimization Implementation */

import { urlFor } from '../../lib/sanityApi.js';

const { imgSrc, altText, width, height, rounded, lazy, async } = Astro.props 

const setRoundetValue = (rounded) => {
    if (rounded === true) {
        return '1rem'
    } else {
        return '0%'
    }
}
let radius = setRoundetValue(rounded)


type LazyValue = 'lazy' | 'eager'
const setLazyValue = (lazy) => {
    if (lazy === true) {
        return 'lazy'
    } else {
        return 'eager'
    }
}
let lazyValue: LazyValue = setLazyValue(lazy)


type AsyncValue = 'async' | 'auto'
const setAsyncValue = (async) => {
    if (async === true) {
        return 'async'
    } else {
        return 'auto'
    }
}
let asyncValue: AsyncValue = setAsyncValue(async)

/* Helper for Screen resolution */ 
// const resolution = () => {
//     const 
// }

---


<!-- <p>
    {imgSrc}
</p> -->

<!-- <img src={urlFor(imgSrc).width(1600).height(900).format('webp').url()} alt="Image" /> -->

<!--
<img 
    style={`width: 100%; border-radius: ${radius};`}
    src={urlFor(imgSrc).width(1600).height(900).flipHorizontal().format('jpg').url()}
    srcset={`
        ${urlFor(imgSrc).width(1600).height(900).format('webp').flipHorizontal().url()} 1600w,
        ${urlFor(imgSrc).width(1200).height(675).format('webp').url()} 1200w,
        ${urlFor(imgSrc).width(800).height(450).format('webp').flipVertical().url()} 800w,
        ${urlFor(imgSrc).width(400).height(225).format('webp').flipHorizontal().flipVertical().url()} 400w
    `} 
    sizes="(max-width: 520px) 100vw, (max-width: 1600px) 50vw, 100vw"

    loading={lazyValue}
    decoding={asyncValue}

    alt={altText}
/>
-->

<!-- TODO: Use Picture Tag instead of img Tag  -->

<picture
    style={`width: 100%; border-radius: ${radius};`}
>
    <source media="(min-width: 1280px)" srcset={urlFor(imgSrc).width(width).height(height).format('webp').url()}>
    <source media="(min-width: 680px)" srcset={urlFor(imgSrc).width(width / 2).height(height / 2).format('webp').url()}>
    <!-- Does not need a media-query cause its default -->
    <source srcset={urlFor(imgSrc).width(width / 2).height(width / 2).format('webp').url()}>
    
    <!-- Fallback-Bild für Browser, die das <picture>-Element nicht unterstützen -->
    <!--
        TODO: Überlegen wie es am meißten Sinn macht.
        "w" in "srcset" steht für die Pixel. Nicht für vw oder so. Es richtet sich aber nach der viewport width, die ich in "sizes" angegeben habe 
        z.B. kann mein Bildschirm 1920px breit sein. Wenn ich dann in "sizes" 50vw angebenen habe, dann sollte ich sagen, dass das Bild mit 960px bzw. 960w geladen werden soll.
        Insofern macht es wenig Sinn, dass ich die Breite aus den Props verwende oder?
    -->
    <img 
        width={width}
        height={height}
        style={`width: 100%; border-radius: ${radius};`}
        src={urlFor(imgSrc).width(width).height(height).format('jpg').url()}
        srcset={`
            ${urlFor(imgSrc).width(width).height(height).format('webp').url()} ${width}w,
            ${urlFor(imgSrc).width(width / 1.5).height(height / 1.5).format('webp').url()} ${width / 1.5}w,
            ${urlFor(imgSrc).width(width / 2).height(height / 2).format('webp').url()} ${width / 2}w,
            ${urlFor(imgSrc).width(width / 4).height(height / 4).format('webp').url()} ${width / 4}w
        `} 
        sizes="(max-width: 679px) 100vw, (min-width: 680px) 100vw, (min-width: 999px) 50vw, 50vw"
    
        loading={lazyValue}
        decoding={asyncValue}
    
        alt={altText}
    />
</picture>


<!-- 
    src={urlFor(imgSrc).width(1600).height(900).flipHorizontal().format('jpg').url()}
    srcset={`
        ${urlFor(imgSrc).width(1600).height(900).format('webp').flipHorizontal().url()} 1600w,
        ${urlFor(imgSrc).width(1200).height(675).format('webp').url()} 1200w,
        ${urlFor(imgSrc).width(800).height(450).format('webp').flipVertical().url()} 800w,
        ${urlFor(imgSrc).width(400).height(225).format('webp').flipHorizontal().flipVertical().url()} 400w
    `} 
    loading="lazy"
    decoding="async"
-->