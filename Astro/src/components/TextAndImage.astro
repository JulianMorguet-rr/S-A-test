---
// Import Node Modules
import { urlFor } from '../lib/sanityApi.js';
import { marked } from 'marked';

// Import Types
import { ContentItem } from '../types/PageContent';

// Import Components
import VideoLightbox from '../components/media/VideoLightbox.vue';

const mediaUploadBaseURL: string = 'https://assets.geschmaecker-sind-verschieden.de' // 'http://localhost:2001' // import.meta.env.NODEMEDIA_URL;

// Import Composables 
import { convertBlockContentToHTML } from '../composables/blockContentToHTML';
// import VideoPersist from './media/VideoPersist.astro';
import { Image } from 'astro:assets';

import CustomImage from './atomicComponents/CustomImage.astro';
import PlayBtn from './atomicComponents/PlayBtn.astro';
import BlockContent from './BlockContent.astro';

const { data } = Astro.props // as { pageBuilder: ContentItem };

var videoID = data.media?.video?.thumbnailPath?.match(/video-(.*?)-thumbnail/)[1];

const content = convertBlockContentToHTML(data.blockContent);


const generateUID = (length = 20) => {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}

const uid = generateUID() // Date.now().toString(36) + Math.random().toString(36).substr(2);




// const content = marked.parse(data.blockContent);


// let browserName = "";
// function fnBrowserDetect(){
                 
//     let userAgent = window.navigator.userAgent;
    
//     if(userAgent.match(/chrome|chromium|crios/i)){
//         browserName = "chrome";
//     }else if(userAgent.match(/firefox|fxios/i)){
//         browserName = "firefox";
//     }  else if(userAgent.match(/safari/i)){
//         browserName = "safari";
//     // }else if(userAgent.match(/opr//i)){
//     //     browserName = "opera";
//     } else if(userAgent.match(/edg/i)){
//         browserName = "edge";
//     }else{
//         browserName = "No browser detection";
//     }
// }
// fnBrowserDetect()
---


<!-- <h2>Test: {JSON.stringify(data.sectionType)}</h2> -->
<!-- <h2>Test: {JSON.stringify(data.blockContent)}</h2> -->

<!-- 
    Old way of fullwidth
    fullwidth-background-${data.fullwidth} fullwidth-${data.fullwidth}
-->


<div class={`text-with-asset inner-section md:grid ${data.sectionType}`}  > <!-- id={data.id ? data.id : ''} -->

    <div class="section-anchor" id={data.customID ? data.customID : ''}></div>

    <!-- <h2>Test: {JSON.stringify(data.sectionType)}</h2> -->
    <div class={`inner-wrapper unset-and-visible`}>
        <div class={`content unset-and-visible gap-8 items-center py-8 px-4 lg:px-6 mx-auto max-w-screen-xl xl:gap-16 md:grid md:grid-cols-2 sm:py-16 switch-sides-${data.switchImageToRightSide}`}>
            <div class="unset-and-visible section-asset image-edge-grid__img base-shadow">
            { 
                data.media?.image ? 
                    <CustomImage 
                        imgSrc={data.media.image} 
                        altText="dashboard image"
                        width={1600}
                        height={900}
                        rounded={false}
                        class="w-full"
                    />
                :   data.cta?.ctaReferenz?.heroImage ? 
                        <CustomImage 
                            imgSrc={data.cta.ctaReferenz.heroImage} 
                            altText="dashboard image"
                            width={1600}
                            height={900}
                            rounded={false}
                            class="w-full"
                        />
                : data.media?.video ? 
                        <div class={`video-wrapper toggleVideoButton-${uid}-${videoID}`}>
                            
                                <!-- TODO: hier Component "PlayBtn.astro" nutzen -->
                                <PlayBtn idfromparent={`inner-${uid}-${videoID}`} absolute={true}></PlayBtn>
                                <!--
                                <div class={`play__Button toggleVideoButton-2-${uid}-${videoID}`}>
                                    <div class="play__Button__Wrapper">
                                        <svg fill="rgb(251 146 60)" height="6rem" width="6rem" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
                                            viewBox="0 0 60 60" xml:space="preserve">
                                            <g>
                                                <path d="M45.563,29.174l-22-15c-0.307-0.208-0.703-0.231-1.031-0.058C22.205,14.289,22,14.629,22,15v30
                                                    c0,0.371,0.205,0.711,0.533,0.884C22.679,45.962,22.84,46,23,46c0.197,0,0.394-0.059,0.563-0.174l22-15
                                                    C45.836,30.64,46,30.331,46,30S45.836,29.36,45.563,29.174z M24,43.107V16.893L43.225,30L24,43.107z"/>
                                                <path d="M30,0C13.458,0,0,13.458,0,30s13.458,30,30,30s30-13.458,30-30S46.542,0,30,0z M30,58C14.561,58,2,45.439,2,30
                                                    S14.561,2,30,2s28,12.561,28,28S45.439,58,30,58z"/>
                                            </g>
                                        </svg>
                                    </div>
                                </div>
                                -->
                            
                            {
                                data.media?.videoThumbnail ?
                                    <picture class="video-thumbnail">
                                        <source srcset={urlFor(data.media.videoThumbnail).width(1600).height(900).format('jpg').url()}} type="image/jpg" />
                                        <img
                                            width="1600"
                                            height="900"
                                            src={urlFor(data.media.videoThumbnail).width(1600).height(900).format('webp').url()}
                                            alt="media.video._id || 'Video Thumbnail'"
                                        />
                                    </picture>
                                    :
                                    <picture class="video-thumbnail">
                                        <source srcset={`${mediaUploadBaseURL}/video-api/${data.media.video?.thumbnailPathWebP}`} type="image/webp" />
                                        <img
                                            width="1600"
                                            height="900"
                                            src={`${mediaUploadBaseURL}/video-api/${data.media.video?.thumbnailPath}`}
                                            alt="media.video._id || 'Video Thumbnail'"
                                        />
                                    </picture>
                            }
                        </div>
                : null
            }
            </div>

            <div class="mt-4 md:mt-0 overflow-visible">
                { data.tagline &&
                    <p class="section-tagline mb-4 md:text-lg text-gray-600 font-bold">
                        {data.tagline}
                    </p>
                }
                { data.heading &&
                    <h2 class="section-heading mb-4 text-4xl tracking-tight font-extrabold text-gray-900">
                        {data.heading}
                    </h2>
                }

                { content &&
                    <div class="section-block-content mb-6 font-light text-gray-500 md:text-lg" set:html={content}></div>
                }

                { data.cta?.ctaReferenz?.slug &&
                    <a href={`/page${data.cta.ctaReferenz.slug}`} class="section-cta cta base-shadow inline-flex items-center mt-6 text-white bg-orange-400 hover:bg-slate-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
                    {data.cta.ctaText}
                    <svg class="ml-2 -mr-1 w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                    </a>
                }

            </div>
        </div>

    </div>
        
    { 
        data.media?.video ?
            <div 
                id={`videoModal-${uid}-${videoID}`} 
                tabindex="-1" 
                aria-hidden="true" 
                class="videoModal hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center w-full md:inset-0 h-modal md:h-full"
            >
                <div class={`modal-background animated-bg-gradient toggleVideoButton-${uid}-${videoID}`}></div>
                
                <!-- Modal header -->
                <div class="modal-nav flex fixed justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600">
                    <button 
                        type="button" 
                        class={`toggleVideoButton-${uid}-${videoID} text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white"`} 
                    >
                    <!-- data-modal-toggle={`Das-ist-redundant-da-class-das-schon-macht-videoModal-${uid}-${videoID}`} -->
                        <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>

                <!-- rounded-lg p-4 w-full max-w-2xl h-full md:h-auto -->
                <div class="videoModal-inner-wrapper relative bg-white rounded-lg shadow dark:bg-gray-800 overflow-hidden">
                    <!-- Modal content -->
                    <div class="videoModal-content relative p-4 ">
                        <div class="modal-inner-content">
                            <!-- Modal header -->
                            <div class="modal-header text-center  pb-4 mb-4 rounded-t sm:mb-5">
                                

                                <h4 class="tertiary-color text-2xl pb-2 mb-0 font-bold">
                                    {data.tagline}
                                </h4>
                                <h3 class="text-4xl pb-4 text-center tertiary-color animated-gradient-text font-semibold text-gray-900">
                                    {data.heading}
                                </h3>

                            </div>
                            <!-- Modal body -->
                            {
                                data.media?.video &&
                                <div class="modal-body">
                                    <video controls poster={urlFor(data.media.videoThumbnail).width(1024).height(576).format('jpg').url()}} class="hero-background-video">
                                            <source src={`${mediaUploadBaseURL}/video-api/${data.media.video.mp4Path}`} type="video/mp4">
                                    </video>  
                                </div>
                                <!-- <source src={`${mediaUploadBaseURL}/video-api/${data.media.video.webmPath}`} type="video/webm"> -->
                            }

                            <div class="videoModal-body py-8 font-light text-gray-500 md:text-lg">
                                
                                <BlockContent data={data.blockContent} />
                                
                            </div>  
                        </div>
                    </div>
                </div>
            </div>

            <script define:vars={{video: `${uid}-${videoID}`}} >
                // JavaScript
                console.log('Modal JS fired');
                console.log('video: ', video)

                let isModalOpen = false;

                function openAndCloseModal() {
                    console.log('openAndCloseModal fired')
                    console.log(`toggleVideoButton-${video}: toggleVideoButton-${video}`)
                    const toggleVideoButton = document.querySelectorAll(`.toggleVideoButton-${video}`);

                    console.log('video: ', video)
                    const videoModal = document.getElementById(`videoModal-${video}`);
                    const videoElement = document.querySelector(`#videoModal-${video} video`)

                    const root = document.querySelector('html'); 
                    const body = document.querySelector('body');
                    const header = document.querySelector('header');

                    function handleEscKeyPress(event) {
                        if (event.key === 'Escape') {
                            console.log('Die "esc"-Taste wurde gedrückt.');
                            toggleVideoModal();
                        }
                    }

                    // Funktion zum toggeln des Modals
                    const toggleVideoModal = () => {
                        // console.log('isSliderDragging: ', isSliderDragging)
                        root.classList.toggle('overflow-hidden');

                        if(isModalOpen) {
                            console.log('remove isModalOpen')
                            root.removeAttribute('data-lenis-prevent')
                            body.removeAttribute('data-lenis-prevent')
                            document.removeEventListener('keydown', handleEscKeyPress);
                            isModalOpen = false;
                        } else {
                            console.log('add isModalOpen')
                            root.setAttribute('data-lenis-prevent', '')
                            body.setAttribute('data-lenis-prevent', '')
                            document.addEventListener('keydown', handleEscKeyPress);
                            isModalOpen = true;
                        }

                        if(!videoModal) return
                        videoModal.classList.toggle('hidden');
                        
                        /* fire only if video modal was opened before | not when video modal was closed before */
                        if(isModalOpen) {
                            if(!videoElement) return
                            // videoElement.currentTime = 0;
                            videoElement.play()

                        } else {
                            videoElement.pause()
                        }
                    }

                    // Funktion zum toggeln des Modals
                    /*
                    const toggleVideoModal = () => {

                        console.log('fire toggleVideoModal: ', video)

                        root.classList.toggle('overflow-hidden');


                        // handle data-lenis-prevent attribute for scrolling behavior
                        if(body.hasAttribute('data-lenis-prevent')) {
                            console.log('remove data-lenis-prevent')
                            root.removeAttribute('data-lenis-prevent')
                            body.removeAttribute('data-lenis-prevent')
                        } else {
                            console.log('add data-lenis-prevent')
                            root.setAttribute('data-lenis-prevent', '')
                            body.setAttribute('data-lenis-prevent', '')
                        }

                        // toggle Header Class
                        // if(header) {
                        //     header.classList.toggle('hide-away');
                        // }


                        console.log(`fire toggleVideoModal ${video}`)
                        if(!videoModal) return
                        videoModal.classList.toggle('hidden');
                        
                        if(!videoElement) return
                        if(videoElement.paused) {
                            videoElement.currentTime = 0;
                            videoElement.play()
                            document.addEventListener('keydown', handleEscKeyPress);
                        } else {
                            videoElement.pause()
                            document.removeEventListener('keydown', handleEscKeyPress);
                        }
                    }
                    */

                    // Event-Listener für den Klick auf den Button
                    toggleVideoButton.forEach(button => {
                        button.addEventListener('click', toggleVideoModal);
                    })
                }

                openAndCloseModal();

            </script>
        : null
    }

</div>






<style lang="scss">
// TODO:    In globale styles auslagern, da ich das ganze nicht für jedes modal nochmal brauche 

// TODO:    Im best case einfach das ganze modal global hinlegen und mit props bestimmen, ob es überhaupt benötigt wird, 
//          wenn ja dann mit JS die Daten mittels "appendChild" in das modal einfügen


// .fullwidth-true {
//     grid-template-columns: 1fr;
// }

div.inner-wrapper {
    container-name: innerWrapper;
    container-type: inline-size;
}

.unset-and-visible {
    position: unset;
    overflow: visible;
}

.fullwidthBackground {
    left: calc(50% - 50vw );
    width: 100vw !important;
    position: relative;
}

// .image-edge-grid__img {
//     grid-column-start: 1;
//     grid-column-end: 15;
//     display: flex;
//     align-items: center;
// }

.fullwidthContent {
    left: calc(50% - 50vw );
    width: 100vw !important;
    position: relative;

    div.inner-wrapper{

        > div {
            width: 100vw !important;
            // max-width: 100vw;
        }

        
        @container innerWrapper (min-inline-size: 1280px) {
            div > div:has(video), div > div:has(img), div > div:has(picture) {
                width: calc(50vw - 4rem / 2 - 12px / 2) // - 6rem); // ursprüglich -6rem
                // max-width: 100vw;
                // margin: auto;
            }

            div.switch-sides-false > div:has(video), div.switch-sides-false > div:has(img), div.switch-sides-false > div:has(picture) {
                margin-left: calc((-100vw + 1280px) / 2 - 2rem + 12px);
            }
        }
    }
}

@container innerWrapper (normal < 1280px) {
    div.inner-wrapper {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
}


@media (min-width: 999px) {
    .switch-sides-true {
        grid-template-rows: repeat(1, 1fr);
    }
    .switch-sides-true > :nth-child(2) { grid-row: 1; }
}



// #videoModal.hidden {
//     display: none;
// }
</style>