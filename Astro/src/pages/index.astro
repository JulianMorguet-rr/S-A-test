---

import Header from '../components/header/Header.vue';
import Layout from '../layouts/Page.astro';
// import Card from '../components/Card.astro';
import PageBuilder from '../components/PageBuilder.astro';
import JobList from '../components/personio/JobList.vue';
import AstroJobs from '../components/personio/astroJobs.astro';

// import { getFirstBlogPost, getSiteSettings } from '../lib/sanityApi.js';
import { getFirstBlogPost, getSiteSettings } from '../lib/sanityApi.js';
import { getHomePage, getPages, getRecruitingData } from '../lib/sanityApi.js';

// URL builder
import { urlFor } from '../lib/sanityApi.js';

const firstPost = await getFirstBlogPost();
const firstPostJSON = JSON.stringify(firstPost);

const siteSettings = await getSiteSettings();
const siteSettingsJSON = JSON.stringify(siteSettings);

const homePage = await getHomePage();
const pageJSON = JSON.stringify(homePage);

// Get Author with Reference 
// import {createClient} from "@sanity/client";
// const client = createClient({
//     projectId: 'tz4j4rda',
//     dataset: 'production',
//     apiVersion: 'v2021-03-25', // use current UTC date - see "specifying API version"!
//     useCdn: true // `false` if you want to ensure fresh data
// })


// let author = { name: 'Julian' }
// const getPosts = async () => {
//   author = await client.fetch('*[_type == "page"][0]{name}')
//   console.log('author', author)
// }
// getPosts()


interface RecruitingData {
	_updatedAt: string;
	_createdAt: string;
	personioXMLFeed: string;
	heading: string;
	_rev: string;
	_type: string;
	_id: string;
}
const recruitingData: RecruitingData = await getRecruitingData();
const recruitingDataJSON = JSON.stringify(recruitingData);

// import imageUrlBuilder from '@sanity/image-url'

---



<!-- <Layout title="Welcome to Astro."> -->
<Layout>

	<!-- <div> 
		<h2>getPosts:</h2>
		{JSON.stringify(author)}
	</div> -->

	<!-- <h2>
			{ homePage.title }
		</h2> -->
		<!-- <p style="color: aliceblue; background: #000;">
			{ firstPost[0].mainImage.asset._ref } <br>
		</p> -->
		<!-- <img src={urlFor(firstPost[0].mainImage.asset._ref).width(200).height(200).format('webp').url()} style="border: solid 3px #000;"/> -->

	{homePage.heroImage && 
		<div class="hero-wrapper">
			<div class="hero" style={{backgroundImage: `url(${urlFor(homePage.heroImage.asset._ref).width(1920).format('webp').url()})`}}>
			
				{ homePage?.heroBackgroundVideo && ( 
					<div>
						<video autoplay loop muted playsinline class="hero-background-video">
							<source src={`http://localhost:1001/${homePage.heroBackgroundVideo.webmPath}`} type="video/webm">
							<source src={`${homePage.heroBackgroundVideo.mp4Path}`} type="video/mp4">
						</video> 
					</div>
				)}

			</div> 
		</div>
	}

	<!--
		<div class="hero-content">
			<p>{JSON.stringify(homePage.pageBuilder)}</p>
			<p>{JSON.stringify(homePage.heroImage.asset._ref)}</p>
			<br/>
			<h2>Path:</h2>
			<p style="background: #000; color: #fff;">{JSON.stringify(homePage.heroBackgroundVideo)}</p>
			<br/>
			{/* 
			<p>{JSON.stringify(homePage.heroBackgroundVideo.webmPath)}</p>
			<p>{JSON.stringify(homePage.heroBackgroundVideo.mp4Path)}</p>
			<h2>All:</h2>
			*/}
			<p style="background: #000; color: #fff;">{JSON.stringify(homePage)}</p>
		</div>
	-->


	{/*
	<div class="hero" style={ `background-image: url(${firstPost[0].imageUrl}); background-size: 100%;`}>
		<h2>
			{ firstPost[0].title }
		</h2>
		<p style="color: aliceblue; background: #000;">
			{ firstPost[0].mainImage.asset._ref } <br/>
		</p>
		<h2>All:</h2>
		<p>{JSON.stringify(firstPost[0])}</p>
		<img src={urlFor(firstPost[0].mainImage.asset._ref).width(200).height(200).format('webp').url()} style="border: solid 3px #000;"/>
	</div>
	 */}
	

	<main>
		<!-- <h1>Welcome to <span class="text-gradient">Sanity + Astro</span></h1> -->

		<!-- <p>{ JSON.stringify(page[0].pageBuilder) }</p> -->

		{homePage.pageBuilder.map(contentItem => (
			// pageContent._type === 'hero' && <h3> {JSON.stringify(pageContent)}</h3> <br/><br/>
			<PageBuilder contentItem={contentItem}/>
			// <p>{JSON.stringify(pageContent)}</p>
        ))}
		<!-- <p>
			{ pagesJSON }
		</p> -->


		
		
		<JobList recruitingData={recruitingData} client:load/>

		
		<div>
			<p>{ firstPost[0].title }</p>
			<p>{ JSON.stringify(firstPost[0].body) }</p>
			<p>{ JSON.stringify(firstPost[0].body[0].children[0].text ) }</p>
		</div>

		<p>
			{ siteSettingsJSON }
		</p>

		<!--
		<p class="instructions">
			To get started, open the directory <code>src/pages</code> in your project.<br />
			<strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
		</p>
		<ul role="list" class="link-card-grid">
			<Card
				href="https://docs.astro.build/"
				title="Documentation"
				body="Learn how Astro works and explore the official API docs."
			/>
			<Card
				href="https://astro.build/integrations/"
				title="Integrations"
				body="Supercharge your project with new frameworks and libraries."
			/>
			<Card
				href="https://astro.build/themes/"
				title="Themes"
				body="Explore a galaxy of community-built starter themes."
			/>
			<Card
				href="https://astro.build/chat/"
				title="Community"
				body="Come say hi to our amazing Discord community. ❤️"
			/>
		</ul> 
		
		-->
	</main>
</Layout>




<style lang="scss">
	.hero-wrapper {
		padding-bottom: 4rem;

		.hero {
			width: 100%;
			min-height: 440px;
			height: calc(100vh - 96px - 200px);
			position: relative;
			overflow: hidden;
			

			.hero-background-video {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			object-fit: cover; /* Skaliert das Video, um das gesamte Element zu füllen */
			}

			.hero-content {
			z-index: 2;
				position: relative;
			padding: 12vh;
			text-align: center;
			color: white;
			}
			h2 {
			color: white;
			font-size: 2rem;
			font-weight: 800;
			margin: 0;
			}
		}
	}


  main {
    margin: auto;
    padding: 0 0 1.5rem 0;
    max-width: 1240px;
  }
  
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>