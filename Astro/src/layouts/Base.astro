---
import { fade, slide  } from 'astro:transitions';

import { urlFor } from "../lib/sanityApi";

import BaseHead from "../components/BaseHead.astro";
import type { Props as BaseHeadProps } from '../components/BaseHead.astro';

import Header from "../components/header/Header.astro";
import Footer from '../components/footer/Footer.astro';

export interface Props {
	seo?: BaseHeadProps;
  prefetch?: any;
  prefetchType?: any;
  preload?: any;
}

const { seo, prefetch, prefetchType } = Astro.props;
const { page, lang, version, path } =  Astro.params

const prefetchList: Array<any> = [];
const prefetchURLs = async () => {
  await prefetch;
  if (!prefetch) return null;

  prefetch.map(item => {
    console.log('item: ', item)
    if(prefetchType === 'single-post') {
      prefetchList.push(urlFor(item.mainImage).width(356).height(174).format('webp').url())
    } 
    if(prefetchType === 'post-overview') {
      prefetchList.push(urlFor(item.mainImage).width(1280).height(627).format('webp').url())
    }
    // urlFor(item.mainImage).width(1920).height(640).format('webp').url()
    // urlFor(postData.mainImage).width(1920).height(640).format('webp').url()
    return urlFor(item.mainImage).width(1920).height(640).format('webp').url() // prefetchList
  })
}

console.log('prefetchURLs: ', prefetchURLs())

import { getGlobalSiteSettings, getAppearance, getMainMenu } from '../lib/sanityApi.js';
const globalSiteSettings = await getGlobalSiteSettings();
const appearance = await getAppearance();
const mainMenu = await getMainMenu();



---

<html lang="de" transition:animate="none">
  <!-- transition:animate="none" -->
  <!-- transition:animate={"none"} -->
  <!-- fade({ duration: '1.4s' }) -->
  <head>
    <BaseHead globalSiteSettings={globalSiteSettings} {...seo}>
      <>
        <!-- prefetch and preload images -->
        {
          prefetchList && 
            prefetchList.map(url => (
              <link rel="prefetch" as="image" href={url} />
            ))
        }

        {
          prefetchList && 
            prefetchList.map(url => (
              <link rel="preload" as="image" href={url} />
            ))
        }
      </>
    </BaseHead>
  </head>

  <!-- class="bg-white dark:bg-gray-900" -->
  <body>

    <!-- <slot name="header" /> -->
    <Header globalSiteSettings={globalSiteSettings} slug={page} mainMenu={mainMenu}  />

    <div transition:name="main-content">
      <slot />
    </div>

    <Footer globalSiteSettings={globalSiteSettings} mainMenu={mainMenu} slug={page} />


    <script>
      // TODO: Scripte auslagern 
      const burgerEventListener = () => {
        document.querySelector('.hamburger').addEventListener('click', () => {
          document.querySelector('.mobile-nav').classList.toggle('expanded');
        });
      }

      document.addEventListener('astro:page-load', burgerEventListener);
    </script>
    
    <script>
      console.log('das Script ist da!')

      // Observer 
      function initObserver() {
        console.log('OBSERVER STARTED!!!')
        
        const sections = [...document.querySelectorAll('section')];
        
        const intersectionObserver = new IntersectionObserver(entries => {
          entries.forEach(entry => {
            // if (entry.intersectionRatio > 0) {
            if (entry.isIntersecting) {
              // entry.target.style.animationPlayState = 'running';
              entry.target.classList.add('observer-detected');
              intersectionObserver.unobserve(entry.target);
            }
            console.log(entry)
          });
        }, {
          threshold: 0.2
        });
    
        sections.forEach(section => {
          intersectionObserver.observe(section);
        });
      }

      // document.addEventListener('astro:load', initObserver);
      // window.addEventListener('astro:page-load', initObserver);
      document.addEventListener('astro:page-load', initObserver);


      // // Page transition Start
      // function pageTransitionStart() {
      //   const colorOverlay = document.querySelector('.color-overlay');

      //   colorOverlay.classList.add('active')
      // }
      // document.addEventListener('astro:after-swap', pageTransitionStart);

      // // Page transition End 
      // function pageTransitionEnd() {
      //   const colorOverlay = document.querySelector('.color-overlay');

      //   colorOverlay.classList.remove('active')
      // }
      // document.addEventListener('astro:page-load', pageTransitionEnd);


      // LÖSUNG FÜR ANDERE ERSCHEINUNG, BEI PAGE RELAOD
      // ggf. könnte ich eine Klasse erstellen, die die Intersection Observer Transition im CSS auf 0 setzt
      // Wenn ich diese Klasse mit "astro:after-swap" hinzufüge, wäre die Page Transition ausgeschaltet. Dies kann aber nur funktionieren, 
      // wenn die Klasse vor dem Intersection Observer hinzugefügt wird.
      // Dazu muss die Seite bei einem PageReload aber wissen was die vorherige Route war, und ob man bei dieser Transition die Animation weglassen soll

    </script>
   

    <!-- <script src="../scripts/intersectionObserver.js" astro:load="true"></script> -->
    
  </body>
</html>


<style>
.header-wrapper {
  z-index: 999;
}

</style>

