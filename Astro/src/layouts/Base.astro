---


// import { gsap } from 'gsap'
// import { ScrollTrigger } from 'gsap/ScrollTrigger'

import { fade, slide  } from 'astro:transitions';

import { urlFor } from "../lib/sanityApi";

import BaseHead from "../components/BaseHead.astro";
import type { Props as BaseHeadProps } from '../components/BaseHead.astro';

import Header from "../components/header/Header.astro";
import Footer from '../components/footer/Footer.astro';

export interface Props {
	seo?: BaseHeadProps;
  prefetch?: any;
  prefetchType?: any;
  preload?: any;
  seoSection?: any;
}

const { seoSection, prefetch, prefetchType } = Astro.props;
const { page, lang, version, path } =  Astro.params

const prefetchList: Array<any> = [];
const prefetchURLs = async () => {
  await prefetch;
  if (!prefetch) return null;

  prefetch.map(item => {
    console.log('item: ', item)
    if(prefetchType === 'single-post') {
      prefetchList.push(urlFor(item.mainImage).width(356).height(174).format('webp').url())
    } 
    if(prefetchType === 'post-overview') {
      prefetchList.push(urlFor(item.mainImage).width(1280).height(627).format('webp').url())
    }
    // urlFor(item.mainImage).width(1920).height(640).format('webp').url()
    // urlFor(postData.mainImage).width(1920).height(640).format('webp').url()
    return urlFor(item.mainImage).width(1920).height(640).format('webp').url() // prefetchList
  })
}

console.log('prefetchURLs: ', prefetchURLs())

import { getGlobalSiteSettings, getAppearance, getMainMenu } from '../lib/sanityApi.js';
const globalSiteSettings = await getGlobalSiteSettings();
const appearance = await getAppearance();
const mainMenu = await getMainMenu();



---

<html lang="de" transition:animate="none">
  <!-- transition:animate="none" -->
  <!-- transition:animate={"none"} -->
  <!-- fade({ duration: '1.4s' }) -->
  <head>
    <BaseHead globalSiteSettings={globalSiteSettings} seoSection={seoSection}>
      <>
        <!-- prefetch and preload images -->
        {
          prefetchList && 
            prefetchList.map(url => (
              <link rel="prefetch" as="image" href={url} />
            ))
        }

        {
          prefetchList && 
            prefetchList.map(url => (
              <link rel="preload" as="image" href={url} />
            ))
        }
      </>
    </BaseHead>
  </head>

  <!-- class="bg-white dark:bg-gray-900" -->
  <body>

    <!-- <slot name="header" /> -->
    <Header globalSiteSettings={globalSiteSettings} slug={page} mainMenu={mainMenu}  />

    <div transition:animate="none">
      <slot />
    </div>

    <Footer globalSiteSettings={globalSiteSettings} mainMenu={mainMenu} slug={page} />



    <div set:html={globalSiteSettings.trackingScript}></div>
    

    <!-- TODO: Install as npm pakcage ore use code locally -->
    <!-- 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js" integrity="sha512-16esztaSRplJROstbIIdwX3N97V1+pZvV33ABoG1H2OyTttBxEGkTsoIVsiP1iaTtM8b3+hu2kB6pQ4Clr5yug==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js" integrity="sha512-Ic9xkERjyZ1xgJ5svx3y0u3xrvfT/uPkV99LBwe68xjy/mGtO+4eURHZBW2xW4SZbFrF1Tf090XqB+EVgXnVjw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    -->

    <!--
    <script>

      // import { gsap } from '../../../public/assets/js/GSAP/gsap.min.js'
      // import { ScrollTrigger } from '../../../public/assets/js/GSAP/ScrollTrigger.min.js' // ../../public/js/GSAP/ScrollTrigger.min.js

      // call funktion after onload event 

      gsap.registerPlugin(ScrollTrigger);

      console.log('gsap: ', gsap)

      let tl = gsap.timeline({
        scrollTrigger: {
          trigger: "hero",
          start: "top top", // first "top" ist for target element, second top is for viewport | can also accept percentages 
          end: "bottom bottom", // first "top" ist for target element, second top is for viewport | can also accept percentages
          scrub: true, // 0.5,
          pin: true,
          markers: true,
          // toggleActions: 'play none none reverse'
        }
      })

      tl.to('.displacement', {
        attr: {
          r: '100vw'
        }, 
        duration: 2,
      })


    </script>
     -->


     <!-- <script>
      function fnBrowserDetect(){      
        let userAgent = window.navigator.userAgent;
        
        if(userAgent.match(/chrome|chromium|crios/i)){
            return "chrome";
        }else if(userAgent.match(/firefox|fxios/i)){
            return "firefox";
        }  else if(userAgent.match(/safari/i)){
            return "safari";
        // }else if(userAgent.match(/opr//i)){
        //     return "opera";
        } else if(userAgent.match(/edg/i)){
            return "edge";
        }else{
            return "No browser detection";
        }
      }

      function playHeroInlineVideo() {
        if(fnBrowserDetect() === "chrome") return
        const heroInlineVideo = document.querySelector('.hero > .inline-video > video');

        if (!heroInlineVideo) return 
        // heroInlineVideo.load();
        console.log('play hero video')
        // @ts-ignore
        heroInlineVideo.play();
      }

      document.addEventListener('astro:page-load', playHeroInlineVideo);

     </script> -->


    <script>
      import Lenis from '@studio-freight/lenis'
      
      function smoothScroll() {

        const lenis = new Lenis()

        lenis.on('scroll', (e) => {
          // console.log(e)
        })

        function raf(time) {
          lenis.raf(time)
          requestAnimationFrame(raf)
        }

        requestAnimationFrame(raf)
      }

      document.addEventListener('astro:page-load', smoothScroll);

    </script>

    <!-- <script>
      // TODO: Scripte auslagern 
      const burgerEventListener = () => {
        const hamburger = document.querySelector('.hamburger')
        const mobileNav = document.querySelector('.mobile-nav')
        if(!hamburger || !mobileNav) return
        hamburger.addEventListener('click', () => {
          mobileNav.classList.toggle('expanded');
        });
      }

      document.addEventListener('astro:page-load', burgerEventListener);
    </script> -->
    
    
    <script>
      console.log('das Script ist da!')

      let observerStarted = false;

      // Observer 
      function initObserver() {
        console.log('OBSERVER STARTED!!!')
        let observerStarted = true;
        
        const sections = [...document.querySelectorAll('section')];
        
        const intersectionObserver = new IntersectionObserver(entries => {
          entries.forEach(entry => {
            // if (entry.intersectionRatio > 0) {
            if (entry.isIntersecting) {
              // entry.target.style.animationPlayState = 'running';
              entry.target.classList.add('observer-detected');
              intersectionObserver.unobserve(entry.target);
            }
            // console.log(entry)
          });
        }, {
          threshold: 0.5
        });
    
        sections.forEach(section => {
          intersectionObserver.observe(section);
        });
      }

      // document.addEventListener('astro:load', initObserver);
      // window.addEventListener('astro:page-load', initObserver);
      document.addEventListener('astro:page-load', initObserver);
      
      if(observerStarted === false) {
        initObserver()
      }

      // // Page transition Start
      // function pageTransitionStart() {
      //   const colorOverlay = document.querySelector('.color-overlay');

      //   colorOverlay.classList.add('active')
      // }
      // document.addEventListener('astro:after-swap', pageTransitionStart);

      // // Page transition End 
      // function pageTransitionEnd() {
      //   const colorOverlay = document.querySelector('.color-overlay');

      //   colorOverlay.classList.remove('active')
      // }
      // document.addEventListener('astro:page-load', pageTransitionEnd);


      // LÖSUNG FÜR ANDERE ERSCHEINUNG, BEI PAGE RELAOD
      // ggf. könnte ich eine Klasse erstellen, die die Intersection Observer Transition im CSS auf 0 setzt
      // Wenn ich diese Klasse mit "astro:after-swap" hinzufüge, wäre die Page Transition ausgeschaltet. Dies kann aber nur funktionieren, 
      // wenn die Klasse vor dem Intersection Observer hinzugefügt wird.
      // Dazu muss die Seite bei einem PageReload aber wissen was die vorherige Route war, und ob man bei dieser Transition die Animation weglassen soll

    </script>
   

    <!-- <script src="../scripts/intersectionObserver.js" astro:load="true"></script> -->
    
  </body>
</html>


<style>
.header-wrapper {
  z-index: 999;
}

</style>

